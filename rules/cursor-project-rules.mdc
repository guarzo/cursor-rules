---
description: "Project-level rules for initializing context, referencing documentation, and maintaining operational protocols. Covers both backend and frontend specifics, as well as safety and directory maintenance."
alwaysApply: false
---
# Cursor Project Rules

## Context Initialization
- **Always Read:**
  - `.notes/project_overview.md` and `.notes/task_list.md` at the start of new features or sessions.
  - `.notes/conversation_summary.md` for historical context and key decisions.
  - `.notes/code_style_guide.md`, `.notes/frontend_guidelines.md`, and `.notes/directory_structure.md` for project-specific context.

## Documentation Reference Protocol
- **When to Reference:**
  - Use `.notes/project_overview.md` for new features and scope clarification.
  - Use `.notes/architecture.md` for design decisions or major component changes.
  - Consult `.notes/task_list.md` before starting tasks or updating progress.
  - Refer to `.notes/conversation_summary.md` for previous decisions.
  - Use `.notes/directory_structure.md` for navigating and planning file additions.
- **Updates:**
  - Always update conversation summaries after significant decisions.

## Operational Protocol
- **Task Approach:**
  - Break tasks into MECE components.
  - Outline a step-by-step pseudocode plan before implementation.
  - Confirm the approach before coding.
- **Code Changes:**
  - Read the relevant code sections thoroughly.
  - Preserve existing functionality; maintain type safety and DRY principles.
  - Avoid leaving TODOs or placeholders.
- **Development Environment:**
  - Do not manually run build commands; rely on the automatic watcher.
  - Focus solely on making code changes as they are auto-recompiled.

## Technology-Specific Guidelines
- **Backend (Elixir/Phoenix):**
  - Write idiomatic Elixir with pattern matching, use contexts/Ash domains, and maintain supervision trees.
  - Follow Phoenix conventions for controllers, schemas, and contexts.
- **Frontend (React/Next.js):**
  - Use functional components with TypeScript and follow accessibility and responsiveness best practices.
  - Use PrimeReact for UI components and SCSS modules for styles.
  - Keep components concise and well-organized; avoid inline functions.
- **UI/UX:**
  - Implement responsive design and maintain a proper z-index hierarchy for overlays and dialogs.

## Safety Requirements
- **Type Safety & Error Handling:**
  - Never break type safety.
  - Always implement proper error handling and document new code.
- **Security:**
  - Use environment variables for sensitive data and enforce proper authentication/authorization.
- **Global Changes:**
  - Ask for explicit permission before making any global styling changes.
  - Test changes in isolation and document them for future reference.

## Directory Structure Maintenance
- Run `.notes/dir_script.sh` after significant file changes.
- Reference `.notes/directory_structure.md` when planning new features.
- Exclude non-user code (build artifacts, dependencies) from the structure.

## Priorities & Modes
- **Priorities:** Use .notes/ as the primary source of truth (weight 1.0).
- **Modes:**
  - Base Mode: For routine tasks with minimal complexity.
  - Enhanced Mode: For complex changes requiring deeper analysis and thorough documentation.
- **Project Directives:**
  - Project Name: wanderer
  - AI First: true

