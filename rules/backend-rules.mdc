---
description: "Backend guidelines for Elixir, Phoenix, and Ash code. Applies to all .ex and .exs files. Focuses on idiomatic functional programming, clear module organization, and robust error handling."
globs:
  - "**/*.ex"
  - "**/*.exs"
alwaysApply: false
---
# Backend (Elixir/Phoenix/Ash) Guidelines

- **Code Style & Structure:**
  - Write concise, idiomatic Elixir code that leverages functional programming and immutability.
  - Use recursion or higher-order functions instead of imperative loops.
  - Use descriptive names: Modules in PascalCase and functions/variables in snake_case.
  - Keep controllers slim; delegate business logic to contexts (or Ash domains).

- **Framework Best Practices:**
  - Leverage Ash Framework to eliminate boilerplate CRUD code.
  - Define resources, actions, and validations in Ash to focus on business logic.
  - Use Ecto’s query and changeset DSL (via Ash) effectively; preload associations to avoid N+1 queries.
  - Embrace OTP principles with proper supervision trees and the “let it crash” philosophy.

- **Error Handling & Security:**
  - Use changesets for validation and provide user-friendly error messages.
  - Guard against common vulnerabilities (e.g., XSS, CSRF).
  - Validate all inputs and secure sensitive operations.

- **Documentation:**
  - Document public modules and functions with @moduledoc and @doc; include @spec types for clarity.
  - Follow Phoenix’s and Ash’s conventions for project structure and file organization.

- **Reference:**
  - See @notes/code_style_guide.md for comprehensive backend standards.

