---
description: "Frontend guidelines for React/TypeScript code. Applies to files with extensions .js, .jsx, .ts, .tsx, and styling files. Enforces modular, accessible, and high-performance UI code."
globs:
  - "**/*.{js,jsx,ts,tsx,css,scss}"
alwaysApply: false
---
# Frontend (React/TypeScript) Guidelines

- **Code Style & Structure:**
  - Write clean, modular JavaScript/TypeScript following a consistent style.
  - Use functional and declarative patterns; avoid class-based components.
  - Prefer composition over duplication; extract reusable logic into custom hooks.

- **Component Conventions:**
  - Use functional components with Hooks. Always define components as:
    `export const MyComponent = () => { ... }`
  - Use PascalCase for component names and camelCase for props/variables.
  - Keep components under 250 lines; split complex logic into separate files.

- **Styling:**
  - Use SCSS modules (*.module.scss) for component-specific styles.
  - Leverage Tailwind CSS for rapid stylingâ€”check existing Tailwind classes before creating custom ones.
  - Use the `:global` block for styles that need to be shared globally.

- **Performance Optimization:**
  - Use React.memo, useCallback, and useMemo to optimize rendering.
  - For large lists, consider virtualization.

- **Linting & Format:**
  - Enforce consistent code format with ESLint and Prettier; always apply autofix before commits.

- **Reference:**
  - See @notes/frontend_guidelines.md for extended details and examples.

